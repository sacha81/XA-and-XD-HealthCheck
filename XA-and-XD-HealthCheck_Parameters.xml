<?xml version="1.0" encoding="utf-8"?>
<settings>
	<Variables>
		<Variable>
			<!-- Define a EnvironmentName e.g. Integration/Production etc. - this will be used in HTML & Email Subject -->
			<Name>EnvironmentName</Name>
			<Value>Citrix Health Status</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define an Output log file e.g CTXXDHealthCheck.log -->
			<Name>OutputLog</Name>
			<Value>CTXXDHealthCheck.log</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define an Output HTML file e.g CTXXDHealthCheck.html -->
			<Name>OutputHTML</Name>
			<Value>CTXXDHealthCheck.htm</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Is the HealthCheck used in a Citrix Cloud enviornment and running on a CloudConnector -->
			<Name>CitrixCloudCheck</Name>
			<Value>0</Value> <!-- 1 or 0 -->
			<Type>[int]</Type>
			<Scope>Script</Scope> <!-- global ? -->
		</Variable>
		<Variable>
			<!-- Cloud API for Enviornments in Citrix Cloud e.g. https://eu.cloud.com/identity/api-access/secure-clients -->
			<Name>CustomerID</Name>
			<Value>a12345b78cde</Value> <!-- this is the short ID like a12345b78cde -->
			<Type>[string]</Type>
			<Scope>Script</Scope> <!-- global ? -->
		</Variable>
		<Variable>
			<!-- Cloud API for Enviornments in Citrix Cloud https://eu.cloud.com/identity/api-access/secure-clients -->
			<Name>SecureClientFile</Name>
			<Value>C:\Company\myCredentialfiles\secureclient.csv</Value> <!--  you need to download the CSV file and locate it on the server running this script, e.g the CloudConnector --> 
			<Type>[string]</Type>
			<Scope>Script</Scope> <!-- global ? -->
		</Variable>
		<Variable>
			<!-- Cloud API for Enviornments in Citrix Cloud e.g. https://eu.cloud.com/identity/api-access/secure-clients -->
			<Name>APIKey</Name>
			<Value>20f97466-76ff-4cfc-ac2a-52790387540a</Value> <!-- this is the GUID ID like 20f97466-76ff-4cfc-ac2a-52790387540a . Only needed when the SecureClientFile is not present -->
			<Type>[string]</Type>
			<Scope>Script</Scope> <!-- global ? -->
		</Variable>
		<Variable>
			<!-- Cloud API for Enviornments in Citrix Cloud e.g. https://eu.cloud.com/identity/api-access/secure-clients -->
			<Name>SecretKey</Name>
			<Value>eoFfKREqbx620gTrJH0JFA==</Value> <!-- this is the secret like eoFfKREqbx620gTrJH0JFA== . Only needed when the SecureClientFile is not present -->
			<Type>[string]</Type>
			<Scope>Script</Scope> <!-- global ? -->
		</Variable>
		<Variable>
			<!-- Set the correct Citrix Cloud API Region for Enviornments that use Citrix Cloud.
			  - US region: api-us.cloud.com
			  - EU region: api-eu.cloud.com
			  - AP-S region: api-ap-s.cloud.com
			  - Japan region: api.citrixcloud.jp
			 Important:
			 - You must use the region where your Citrix Cloud account is set to.
			 - If you use the incorrect region, you will get the error: "The remote server returned an error: (404) Not Found."
			 I feel that Citrix could use more intelligence here to automatically proxy/redirect a request to the correct region. -->
			<Name>CCRegion</Name>
			<Value>api-ap-s.cloud.com</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to true to append the SiteId GUID to the Citrix Cloud Site Name or "cloudxdsite". This allows for uniqueness when running checks against multiple Citrix Cloud sites. -->
			<Name>AppendCCSiteIdToName</Name>
			<Value>true</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to true to bypass the default system proxy when using the Invoke-RestMethod and Invoke-WebRequest cmdlets.
			This is important for on-prem connectivity to avoid getting "The remote server returned an error: (503) Server Unavailable." error. -->
			<Name>NoProxy</Name>
			<Value>true</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to true to bypass certificate validation. Not recommended for production platforms. -->
			<Name>SkipCertificateCheck</Name>
			<Value>false</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define the hostnames of delivery controllers, you can use localhost if you run this script localy
			     Example: CXDC01.domain.tld,CXDC02.domain.tld -->
			<Name>DeliveryControllers</Name>
			<Value>localhost</Value> <!-- Add Server separated by comma -->
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Information about the disk you want to check. -->
			<Name>diskLettersControllers</Name>
			<Value>C,D</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Raise alert if delivery controllers have been rebooted in less than this number of days -->
			<Name>minUpTimeDaysDDC</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Set to 1 if you want to Check a Environment with Cloud Connectors -->
			<Name>ShowCloudConnectorTable</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define the hostnames of Cloud Connector Servers
			     Example: CCS01.domain.tld,CCS02.domain.tld -->
			<Name>CloudConnectorServers</Name>
			<Value></Value> <!-- Add Server separated by comma -->
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Set to 1 if you want to Check a Environment with Storefront -->
			<Name>ShowStorefrontTable</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define the hostnames of Storefront Servers
			     Example: CXS01.domain.tld,CXS02.domain.tld -->
			<Name>StoreFrontServers</Name>
			<Value></Value> <!-- Add Server separated by comma -->
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Maximum uptime of a virtual Desktop or a XenApp
				 Example: 7 -->
			<Name>maxUpTimeDays</Name>
			<Value>7</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude Catalogs, e.g Testing or Poc-Catalogs
				 Example: Windows 7,Windows 8 Test
				 Supports wildcards -->
			<Name>ExcludedCatalogs</Name>
			<Value></Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude Delivery Groups, e.g Testing or Poc-DGs
				 Example: Windows 7,Windows 8 Test
				 Supports wildcards -->
			<Name>ExcludedDeliveryGroups</Name>
			<Value></Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude Tags, e.g excludeFromReport, UAT, etc
				 Supports wildcards -->
			<Name>ExcludedTags</Name>
			<Value>excludeFromReport</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- define the maximum of counted machines (default is only 250) -->
			<Name>maxmachines</Name>
			<Value>5000</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Time (In Days) that it will look back for maintenance mode actions
				 Example: 30
				 This is handy data to have in the reports so you can see who placed the
				 machines, Delivery Groups and Hypervisor Connections into maintenance mode -->
			<Name>MaintenanceModeActionsFromPastinDays</Name>
			<Value>30</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Time (In Hours) of that it will look back for Broker Connection Failures
				 Example: 12
				 If the report is run first thing in the morning, this will help see any
				 brokering issues that occurred overnight -->
			<Name>BrokerConnectionFailuresinHours</Name>
			<Value>12</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set a list of supported VDA versions. Any versions that do not match will be marked
				  as a warning. Leave blank to ignore this.
				  Supports wildcards -->
			<Name>SupportedVDAVersions</Name>
			<Value>2203.*,2402.*,2507.*</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Set to 1 if you want to Show and Check the CrowdStrike Tests in all tables -->
			<Name>ShowCrowdStrikeTests</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Mark failed Spooler and CitrixPrint services as warning only.
				 It reduces the red (errors) in the reports in environments where these services are
				 not required for normal operation -->
			<Name>MarkSpoolerAsWarningOnly</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- XenDesktop Options -->
		<Variable>
			<!-- # Set to 1 if you want to Check a Environment with XenDesktop (V 5.x and higher) -->
			<Name>ShowDesktopTable</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to the header name you would like to use to sort the table in ascending order.
				 Example: DeliveryGroup
				 This will sort by Delivery Group in ascending order, instead of hostname, which can
				 to identify config differences within that Delivery Group  where hostnames are not
				 contiguous or naming standards have changed over time.
				 Leave blank for default sort, which is hostname in ascending order. -->
			<Name>SortDesktopTableByHeaderName</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you ONLY want to see bad DESKTOPS (Unregistered, to high Uptime)
				 I propose to set this value to 1 in not small environments >50 Desktops -->
			<Name>ShowOnlyErrorVDI</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you want to see the used graphic mode)
				  -->
			<Name>ShowGraphicsMode</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- XenApp Options -->
		<Variable>
			<!-- Set to 1 if you want to Check a Environment with XenApp (V 7.x and higher) - if you need a Script for versions below visit http://deptive.co.nz/xenapp-farm-health-check-v2/ -->
			<Name>ShowXenAppTable</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to the header name you would like to use to sort the table in ascending order.
				 Example: DeliveryGroup
				 This will sort by Delivery Group in ascending order, instead of hostname, which can
				 to identify config differences within that Delivery Group  where hostnames are not
				 contiguous or naming standards have changed over time.
				 Leave blank for default sort, which is hostname in ascending order. -->
			<Name>SortXenAppTableByHeaderName</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define if you ONLY want to see bad XENAPP (Unregistered, to high Uptime)
				 I propose to set this value to 1 in not small environments >50 Desktops -->
			<Name>ShowOnlyErrorXA</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Information about the disk you want to check. -->
			<Name>diskLettersWorkers</Name>
			<Value>C,D</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to 1 if you want to see connected XenApp Users -->
			<Name>ShowConnectedXenAppUsers</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set value for a load of a XenApp server that is be fine, but is needed to escalate -->
			<Name>loadIndexWarning</Name>
			<Value>6000</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set value for a load of a XenApp server that is be critical -->
			<Name>loadIndexError</Name>
			<Value>8500</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
<!-- License Options -->
			<!-- # Set to 1 if you want to Check a Citrix license usage -->
			<Name>ShowCTXLicense</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- # Select types of licenses to report, eg: XDT_PLT_UD, PVSD_STD_CCS -->
			<Name>CTXLicenseMode</Name>
			<Value>XDT_PLT_CCS,XDT_PLT_UD,PVSD_STD_CCS</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- Stuck Sessions Options -->
		<Variable>
			<!-- Set to 1 if you want to process and display the Stuck Sessions Table -->
			<Name>ShowStuckSessionsTable</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Maximum Disconnect Time (In Hours) of a virtual Desktop or a XenApp host
				 Example: 8
				 This will help to evaluate stuck or stale sessions -->
			<Name>MaxDisconnectTimeInHours</Name>
			<Value>8</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Exclude user accounts from being flagged as a Stuck Session
			      Example: kiosk
				  Supports wildcards -->
			<Name>ExcludedStuckSessionUserAccounts</Name>
			<Value></Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- MCS/PVS-Section: If you are using WriteCache to HD -->
		<Variable>
			<!-- Drive to MCSIO vDisk write cache file -->
			<Name>MCSIOWriteCacheDrive</Name>
			<Value>D</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Drive to PVS vDisk write cache file -->
			<Name>PvsWriteCacheDrive</Name>
			<Value>D</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Maximum size of the local PVS (vdiskdif.vhdx) and MCSIO (mcsdif.vhdx) write cache file -->
			<Name>WriteCacheMaxSizeInGB</Name>
			<Value>15</Value> <!-- size in GB -->
			<Type>[long]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- Logon Duration Params -->
		<Variable>
			<!-- Define a EnvironmentName for the LogonDuration e.g. Integration/Production etc. - this will be used in HTML & Email Subject -->
			<Name>EnvironmentNameLogonDuration</Name>
			<Value>Citrix Logon Duration</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define an Output log file for Citrix Logon Durations e.g CTXLogonDurations.log -->
			<Name>OutputLogLogonDurations</Name>
			<Value>CTXLogonDurations.log</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- The script will get the sessions that have a LogonDuration greater than the number of seconds you set here.
			Your aim should always be 30, but that may not always be practical. -->
			<Name>LogonDurationInSeconds</Name>
			<Value>30</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set this to how many hours in time you want to look back into the logs from script runtime. -->
			<Name>HoursToLookBack</Name>
			<Value>24</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set this to the number of records you want to output. The script sorts all records collected in descending
			order and and then returns the top x records. Setting this to 0 will output all records -->
			<Name>NumberOfRecordsToOutput</Name>
			<Value>0</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Only set this to True if your on-prem version supports of the LogonMetrics entity values for
			AppxAssociationStartDate,AppxAssociationEndDate,AppxLoadPackageStartDate and AppxLoadPackageEndDate.
			This is for future versions as this is yet to be ported to on-prem versions. -->
			<Name>OnPremAppxSupport</Name>
			<Value>false</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- Syslog Configuration -->
		<Variable>
			<!-- Set to true if you want to send to Syslog -->
			<Name>CheckOutputSyslog</Name>
			<Value>true</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define an Output Syslog file for the Citrix Health Check e.g CTXXDHealthCheckSyslog.log -->
			<Name>OutputSyslog</Name>
			<Value>CTXXDHealthCheckSyslog.log</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Define an Output Syslog file for Citrix Logon Durations e.g CTXLogonDurationsSyslog.log -->
			<Name>OutputSyslogLogonDurations</Name>
			<Value>CTXLogonDurationsSyslog.log</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<!--
		The STRUCTURED-DATA part of an RFC 5424 syslog message is enclosed in square brackets ([]). Within these brackets, each SD-ELEMENT begins
		with its unique SD-ID, followed by its associated parameters.
		- The prefix for the Structured Data ID, which is the bit that comes before the @ symbol. This is a constant within the script and does not
		need to be in this params file.
		- The Private Enterprise Number (PEN) comes after the @ symbol to make up the Structured Data ID (SD-ID). This is set here.
		The MSGID field provides a unique identifier for the type of message being sent. This field helps in categorizing and filtering log messages.
		- The MSGID (Message Identifier) is also a constant within the script and does not need to be in this params file.
		-->
		<Variable>
			<!-- Private Enterprise Number (PEN). For these reports we are using the Private Enterprise Number (PEN) registered to Citrix of 3845.
			- Registered Private Enterprise Numbers (PENs) can be found here:
			  - https://www.iana.org/assignments/enterprise-numbers/
			- If you don't have a Private Enterprise Number (PEN), and you do not want to use the one registered to Citrix, you can request
			a new assignment for free here:
			  - https://www.iana.org/assignments/enterprise-numbers/assignment/apply/ -->
			<Name>PrivateEnterpriseNumber</Name>
			<Value>3845</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Set to true to output to file only or false to also send to the Syslog server. -->
			<Name>SyslogFileOnly</Name>
			<Value>true</Value>
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Address of the Syslog Server. It will use UDP 514 as the port -->
			<Name>SyslogServer</Name>
			<Value>192.168.1.15</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
<!-- E-Mail Configuration -->
		<Variable>
			<!-- Set to 1 if you want to send E-mail -->
			<Name>CheckSendMail</Name>
			<Value>1</Value>
			<Type>[int]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Address of the sender -->
			<Name>emailFrom</Name>
			<Value>citrix@mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Address of the recipient -->
			<Name>emailTo</Name>
			<Value>citrix@mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Address of the recipient for CC -->
			<Name>emailCC</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- IP or name of SMTP server  -->
			<Name>smtpServer</Name>
			<Value>mailrelay.mycompany.ch</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Port of SMTP server -->
			<Name>smtpServerPort</Name>
			<Value>25</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Use ssl for SMTP or not -->
			<Name>smtpEnableSSL</Name>
			<Value>False</Value> <!-- False or True -->
			<Type>[bool]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Priority of email -->
			<Name>emailPrio</Name>
			<Value>Low</Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Username -->
			<Name>smtpUser</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Key for password encryption -->
			<Name>smtpKey</Name>
			<Value>7,13,25,32,42,64,72,88,91,55,88,55,77,59,22,82,200,0,3,88,10,55,93,244</Value>
			<Type>[array]</Type>
			<Scope>Script</Scope>
		</Variable>
		<Variable>
			<!-- Password
				 Create password with follow two lines
				 $Credential = Get-Credential
				 $credential.Password | ConvertFrom-SecureString -Key $smtpKey -->
			<Name>smtpPW</Name>
			<Value></Value>
			<Type>[string]</Type>
			<Scope>Script</Scope>
		</Variable>
	</Variables>
</settings>
